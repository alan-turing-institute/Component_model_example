// Generated by `wit-bindgen` 0.25.0. DO NOT EDIT!
// Options used:
#[derive(Clone)]
pub struct Structure {
    pub number: u64,
    pub some_str: _rt::String,
}
impl ::core::fmt::Debug for Structure {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("Structure")
            .field("number", &self.number)
            .field("some-str", &self.some_str)
            .finish()
    }
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_get_structure_cabi<T: Guest>() -> *mut u8 {
    #[cfg(target_arch = "wasm32")]
    _rt::run_ctors_once();
    let result0 = T::get_structure();
    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
    let Structure {
        number: number2,
        some_str: some_str2,
    } = result0;
    *ptr1.add(0).cast::<i64>() = _rt::as_i64(number2);
    let vec3 = (some_str2.into_bytes()).into_boxed_slice();
    let ptr3 = vec3.as_ptr().cast::<u8>();
    let len3 = vec3.len();
    ::core::mem::forget(vec3);
    *ptr1.add(12).cast::<usize>() = len3;
    *ptr1.add(8).cast::<*mut u8>() = ptr3.cast_mut();
    ptr1
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_get_structure<T: Guest>(arg0: *mut u8) {
    let l0 = *arg0.add(8).cast::<*mut u8>();
    let l1 = *arg0.add(12).cast::<usize>();
    _rt::cabi_dealloc(l0, l1, 1);
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn _export_hello_world_cabi<T: Guest>() -> *mut u8 {
    #[cfg(target_arch = "wasm32")]
    _rt::run_ctors_once();
    let result0 = T::hello_world();
    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
    let vec2 = (result0.into_bytes()).into_boxed_slice();
    let ptr2 = vec2.as_ptr().cast::<u8>();
    let len2 = vec2.len();
    ::core::mem::forget(vec2);
    *ptr1.add(4).cast::<usize>() = len2;
    *ptr1.add(0).cast::<*mut u8>() = ptr2.cast_mut();
    ptr1
}
#[doc(hidden)]
#[allow(non_snake_case)]
pub unsafe fn __post_return_hello_world<T: Guest>(arg0: *mut u8) {
    let l0 = *arg0.add(0).cast::<*mut u8>();
    let l1 = *arg0.add(4).cast::<usize>();
    _rt::cabi_dealloc(l0, l1, 1);
}
pub trait Guest {
    /// export structure;
    fn get_structure() -> Structure;
    fn hello_world() -> _rt::String;
}
#[doc(hidden)]

macro_rules! __export_world_example_cabi{
  ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

    #[export_name = "get-structure"]
    unsafe extern "C" fn export_get_structure() -> *mut u8 {
      $($path_to_types)*::_export_get_structure_cabi::<$ty>()
    }
    #[export_name = "cabi_post_get-structure"]
    unsafe extern "C" fn _post_return_get_structure(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_get_structure::<$ty>(arg0)
    }
    #[export_name = "hello-world"]
    unsafe extern "C" fn export_hello_world() -> *mut u8 {
      $($path_to_types)*::_export_hello_world_cabi::<$ty>()
    }
    #[export_name = "cabi_post_hello-world"]
    unsafe extern "C" fn _post_return_hello_world(arg0: *mut u8,) {
      $($path_to_types)*::__post_return_hello_world::<$ty>(arg0)
    }
  };);
}
#[doc(hidden)]
pub(crate) use __export_world_example_cabi;
#[repr(align(8))]
struct _RetArea([::core::mem::MaybeUninit<u8>; 16]);
static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 16]);
mod _rt {
    pub use alloc_crate::string::String;

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen_rt::run_ctors_once();
    }

    pub fn as_i64<T: AsI64>(t: T) -> i64 {
        t.as_i64()
    }

    pub trait AsI64 {
        fn as_i64(self) -> i64;
    }

    impl<'a, T: Copy + AsI64> AsI64 for &'a T {
        fn as_i64(self) -> i64 {
            (*self).as_i64()
        }
    }

    impl AsI64 for i64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }

    impl AsI64 for u64 {
        #[inline]
        fn as_i64(self) -> i64 {
            self as i64
        }
    }
    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }
    extern crate alloc as alloc_crate;
    pub use alloc_crate::alloc;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_example_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::__export_world_example_cabi!($ty with_types_in $($path_to_types_root)*);
  )
}
#[doc(inline)]
pub(crate) use __export_example_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.25.0:example:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 246] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07y\x01A\x02\x01A\x06\x01\
r\x02\x06numberw\x08some-strs\x03\0\x09structure\x03\0\0\x01@\0\0\x01\x04\0\x0dg\
et-structure\x01\x02\x01@\0\0s\x04\0\x0bhello-world\x01\x03\x04\x01\x1ecomponent\
:test-lib-v02/example\x04\0\x0b\x0d\x01\0\x07example\x03\0\0\0G\x09producers\x01\
\x0cprocessed-by\x02\x0dwit-component\x070.208.1\x10wit-bindgen-rust\x060.25.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen_rt::maybe_link_cabi_realloc();
}
